I0409 11:30:02.061523   78720 out.go:278] Setting OutFile to fd 1 ...
I0409 11:30:02.061763   78720 out.go:330] isatty.IsTerminal(1) = false
I0409 11:30:02.061770   78720 out.go:291] Setting ErrFile to fd 2...
I0409 11:30:02.061775   78720 out.go:330] isatty.IsTerminal(2) = false
I0409 11:30:02.061891   78720 root.go:317] Updating PATH: /Users/izuyev/.minikube/bin
I0409 11:30:02.062448   78720 out.go:285] Setting JSON to false
I0409 11:30:02.180012   78720 start.go:108] hostinfo: {"hostname":"izuyev-macbookpro1.roam.corp.google.com","uptime":3101415,"bootTime":1614891587,"procs":513,"os":"darwin","platform":"darwin","platformFamily":"Standalone Workstation","platformVersion":"11.2","kernelVersion":"20.3.0","kernelArch":"x86_64","virtualizationSystem":"","virtualizationRole":"","hostId":"c86236b2-4976-3542-80ca-74a6b8b4ba03"}
W0409 11:30:02.180152   78720 start.go:116] gopshost.Virtualization returned error: not implemented yet
I0409 11:30:02.270496   78720 out.go:157] * minikube v1.19.0-beta.0 on Darwin 11.2
* minikube v1.19.0-beta.0 on Darwin 11.2
I0409 11:30:02.270993   78720 notify.go:126] Checking for updates...
I0409 11:30:02.271660   78720 driver.go:322] Setting default libvirt URI to qemu:///system
I0409 11:30:02.492243   78720 docker.go:119] docker version: linux-20.10.5
I0409 11:30:02.492442   78720 cli_runner.go:115] Run: docker system info --format "{{json .}}"
I0409 11:30:03.524872   78720 cli_runner.go:168] Completed: docker system info --format "{{json .}}": (1.032368233s)
I0409 11:30:03.525419   78720 info.go:261] docker info: {ID:7LVM:BUH4:JSU4:LOKG:2IDA:P5KW:5JDC:LJYO:P74U:YY4Y:H5SU:VFY3 Containers:27 ContainersRunning:0 ContainersPaused:0 ContainersStopped:27 Images:45 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Native Overlay Diff true]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:true KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:true NFd:42 OomKillDisable:true NGoroutines:48 SystemTime:2021-04-09 18:30:02.645072192 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:4 KernelVersion:4.19.121-linuxkit OperatingSystem:Docker Desktop OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:6 MemTotal:4129861632 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:docker-desktop Labels:[] ExperimentalBuild:true ServerVersion:20.10.5 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:269548fa27e0089a8b8278fc4fc781d7f65a939b Expected:269548fa27e0089a8b8278fc4fc781d7f65a939b} RuncCommit:{ID:ff819c7e9184c13b7c2607fe6c30ae19403a7aff Expected:ff819c7e9184c13b7c2607fe6c30ae19403a7aff} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=default] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Experimental:true Name:app Path:/usr/local/lib/docker/cli-plugins/docker-app SchemaVersion:0.1.0 ShortDescription:Docker App Vendor:Docker Inc. Version:v0.9.1-beta3] map[Name:buildx Path:/usr/local/lib/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Build with BuildKit Vendor:Docker Inc. Version:v0.5.1-docker] map[Name:scan Path:/usr/local/lib/docker/cli-plugins/docker-scan SchemaVersion:0.1.0 ShortDescription:Docker Scan Vendor:Docker Inc. Version:v0.5.0]] Warnings:<nil>}}
I0409 11:30:03.558346   78720 out.go:157] * Using the docker driver based on user configuration
* Using the docker driver based on user configuration
I0409 11:30:03.558378   78720 start.go:276] selected driver: docker
I0409 11:30:03.558387   78720 start.go:718] validating driver "docker" against <nil>
I0409 11:30:03.558406   78720 start.go:729] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc:}
I0409 11:30:03.559321   78720 cli_runner.go:115] Run: docker system info --format "{{json .}}"
I0409 11:30:03.842829   78720 info.go:261] docker info: {ID:7LVM:BUH4:JSU4:LOKG:2IDA:P5KW:5JDC:LJYO:P74U:YY4Y:H5SU:VFY3 Containers:27 ContainersRunning:0 ContainersPaused:0 ContainersStopped:27 Images:45 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Native Overlay Diff true]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:true KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:true NFd:42 OomKillDisable:true NGoroutines:48 SystemTime:2021-04-09 18:30:03.73682986 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:4 KernelVersion:4.19.121-linuxkit OperatingSystem:Docker Desktop OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:6 MemTotal:4129861632 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:docker-desktop Labels:[] ExperimentalBuild:true ServerVersion:20.10.5 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:269548fa27e0089a8b8278fc4fc781d7f65a939b Expected:269548fa27e0089a8b8278fc4fc781d7f65a939b} RuncCommit:{ID:ff819c7e9184c13b7c2607fe6c30ae19403a7aff Expected:ff819c7e9184c13b7c2607fe6c30ae19403a7aff} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=default] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Experimental:true Name:app Path:/usr/local/lib/docker/cli-plugins/docker-app SchemaVersion:0.1.0 ShortDescription:Docker App Vendor:Docker Inc. Version:v0.9.1-beta3] map[Name:buildx Path:/usr/local/lib/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Build with BuildKit Vendor:Docker Inc. Version:v0.5.1-docker] map[Name:scan Path:/usr/local/lib/docker/cli-plugins/docker-scan SchemaVersion:0.1.0 ShortDescription:Docker Scan Vendor:Docker Inc. Version:v0.5.0]] Warnings:<nil>}}
I0409 11:30:03.843012   78720 start_flags.go:253] no existing cluster config was found, will generate one from the flags 
I0409 11:30:03.847142   78720 start_flags.go:311] Using suggested 3890MB memory alloc based on sys=16384MB, container=3938MB
I0409 11:30:03.851359   78720 start_flags.go:730] Wait components to verify : map[apiserver:true system_pods:true]
I0409 11:30:03.852146   78720 cni.go:81] Creating CNI manager for ""
I0409 11:30:03.852160   78720 cni.go:153] CNI unnecessary in this configuration, recommending no CNI
I0409 11:30:03.852166   78720 start_flags.go:270] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a Memory:3890 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.99.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.20.2 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[] Addons:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: MultiNodeRequested:false}
I0409 11:30:03.888732   78720 out.go:157] * Starting control plane node minikube in cluster minikube
* Starting control plane node minikube in cluster minikube
I0409 11:30:03.888776   78720 image.go:107] Checking for gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a in local docker daemon
I0409 11:30:04.102247   78720 image.go:111] Found gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a in local docker daemon, skipping pull
I0409 11:30:04.102296   78720 cache.go:116] gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a exists in daemon, skipping pull
I0409 11:30:04.102310   78720 preload.go:97] Checking if preload exists for k8s version v1.20.2 and runtime docker
I0409 11:30:04.102371   78720 preload.go:105] Found local preload: /Users/izuyev/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v10-v1.20.2-docker-overlay2-amd64.tar.lz4
I0409 11:30:04.102380   78720 cache.go:54] Caching tarball of preloaded images
I0409 11:30:04.102405   78720 preload.go:131] Found /Users/izuyev/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v10-v1.20.2-docker-overlay2-amd64.tar.lz4 in cache, skipping download
I0409 11:30:04.102410   78720 cache.go:57] Finished verifying existence of preloaded tar for  v1.20.2 on docker
I0409 11:30:04.102898   78720 profile.go:148] Saving config to /Users/izuyev/.minikube/profiles/minikube/config.json ...
I0409 11:30:04.102949   78720 lock.go:36] WriteFile acquiring /Users/izuyev/.minikube/profiles/minikube/config.json: {Name:mkff1e4aadbb3d08a076c693f2c306111edbb172 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0409 11:30:04.103354   78720 cache.go:185] Successfully downloaded all kic artifacts
I0409 11:30:04.103387   78720 start.go:313] acquiring machines lock for minikube: {Name:mk2cc7afd1109b55806501f01695d95867ab7770 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0409 11:30:04.103461   78720 start.go:317] acquired machines lock for "minikube" in 62.377µs
I0409 11:30:04.103488   78720 start.go:89] Provisioning new machine with config: &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a Memory:3890 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.99.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.20.2 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.20.2 ControlPlane:true Worker:true}] Addons:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: MultiNodeRequested:false} &{Name: IP: Port:8443 KubernetesVersion:v1.20.2 ControlPlane:true Worker:true}
I0409 11:30:04.103565   78720 start.go:126] createHost starting for "" (driver="docker")
I0409 11:30:04.141580   78720 out.go:184] * Creating docker container (CPUs=2, Memory=3890MB) ...
* Creating docker container (CPUs=2, Memory=3890MB) ...
I0409 11:30:04.142471   78720 start.go:160] libmachine.API.Create for "minikube" (driver="docker")
I0409 11:30:04.143081   78720 client.go:168] LocalClient.Create starting
I0409 11:30:04.143544   78720 main.go:126] libmachine: Reading certificate data from /Users/izuyev/.minikube/certs/ca.pem
I0409 11:30:04.160233   78720 main.go:126] libmachine: Decoding PEM data...
I0409 11:30:04.160296   78720 main.go:126] libmachine: Parsing certificate...
I0409 11:30:04.165663   78720 main.go:126] libmachine: Reading certificate data from /Users/izuyev/.minikube/certs/cert.pem
I0409 11:30:04.166090   78720 main.go:126] libmachine: Decoding PEM data...
I0409 11:30:04.166113   78720 main.go:126] libmachine: Parsing certificate...
I0409 11:30:04.167655   78720 cli_runner.go:115] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0409 11:30:04.371054   78720 cli_runner.go:162] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0409 11:30:04.371563   78720 network_create.go:249] running [docker network inspect minikube] to gather additional debugging logs...
I0409 11:30:04.371594   78720 cli_runner.go:115] Run: docker network inspect minikube
W0409 11:30:04.558826   78720 cli_runner.go:162] docker network inspect minikube returned with exit code 1
I0409 11:30:04.558859   78720 network_create.go:252] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error: No such network: minikube
I0409 11:30:04.558869   78720 network_create.go:254] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error: No such network: minikube

** /stderr **
I0409 11:30:04.559015   78720 cli_runner.go:115] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0409 11:30:04.750333   78720 network.go:263] reserving subnet 192.168.49.0 for 1m0s: &{mu:{state:0 sema:0} read:{v:{m:map[] amended:true}} dirty:map[192.168.49.0:0xc0005d8218] misses:0}
I0409 11:30:04.750886   78720 network.go:210] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:}}
I0409 11:30:04.750912   78720 network_create.go:100] attempt to create docker network minikube 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 1500 ...
I0409 11:30:04.751059   78720 cli_runner.go:115] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true minikube
I0409 11:30:05.333907   78720 network_create.go:84] docker network minikube 192.168.49.0/24 created
I0409 11:30:05.333961   78720 kic.go:102] calculated static IP "192.168.49.2" for the "minikube" container
I0409 11:30:05.334797   78720 cli_runner.go:115] Run: docker ps -a --format {{.Names}}
I0409 11:30:05.550834   78720 cli_runner.go:115] Run: docker volume create minikube --label name.minikube.sigs.k8s.io=minikube --label created_by.minikube.sigs.k8s.io=true
I0409 11:30:05.826573   78720 oci.go:102] Successfully created a docker volume minikube
I0409 11:30:05.826755   78720 cli_runner.go:115] Run: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a -d /var/lib
I0409 11:30:08.074624   78720 cli_runner.go:168] Completed: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a -d /var/lib: (2.247781555s)
I0409 11:30:08.074647   78720 oci.go:106] Successfully prepared a docker volume minikube
I0409 11:30:08.074796   78720 cli_runner.go:115] Run: docker info --format "'{{json .SecurityOptions}}'"
I0409 11:30:08.075991   78720 preload.go:97] Checking if preload exists for k8s version v1.20.2 and runtime docker
I0409 11:30:08.076187   78720 preload.go:105] Found local preload: /Users/izuyev/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v10-v1.20.2-docker-overlay2-amd64.tar.lz4
I0409 11:30:08.076207   78720 kic.go:175] Starting extracting preloaded images to volume ...
I0409 11:30:08.076419   78720 cli_runner.go:115] Run: docker run --rm --entrypoint /usr/bin/tar -v /Users/izuyev/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v10-v1.20.2-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a -I lz4 -xf /preloaded.tar -C /extractDir
I0409 11:30:08.364655   78720 cli_runner.go:115] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=3890mb --memory-swap=3890mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a
I0409 11:30:10.446958   78720 cli_runner.go:168] Completed: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=3890mb --memory-swap=3890mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a: (2.082135398s)
I0409 11:30:10.447194   78720 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Running}}
I0409 11:30:10.672055   78720 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
I0409 11:30:10.946192   78720 cli_runner.go:115] Run: docker exec minikube stat /var/lib/dpkg/alternatives/iptables
I0409 11:30:11.310840   78720 oci.go:278] the created container "minikube" has a running status.
I0409 11:30:11.310940   78720 kic.go:206] Creating ssh key for kic: /Users/izuyev/.minikube/machines/minikube/id_rsa...
I0409 11:30:11.893510   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/machines/minikube/id_rsa.pub -> /home/docker/.ssh/authorized_keys
I0409 11:30:11.894320   78720 kic_runner.go:188] docker (temp): /Users/izuyev/.minikube/machines/minikube/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0409 11:30:12.471352   78720 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
I0409 11:30:12.771450   78720 kic_runner.go:94] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0409 11:30:12.771528   78720 kic_runner.go:115] Args: [docker exec --privileged minikube chown docker:docker /home/docker/.ssh/authorized_keys]
I0409 11:30:23.004555   78720 cli_runner.go:168] Completed: docker run --rm --entrypoint /usr/bin/tar -v /Users/izuyev/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v10-v1.20.2-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a -I lz4 -xf /preloaded.tar -C /extractDir: (14.927768284s)
I0409 11:30:23.005225   78720 kic.go:184] duration metric: took 14.928747 seconds to extract preloaded images to volume
I0409 11:30:23.005429   78720 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
I0409 11:30:23.160187   78720 machine.go:88] provisioning docker machine ...
I0409 11:30:23.160260   78720 ubuntu.go:169] provisioning hostname "minikube"
I0409 11:30:23.160547   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:23.496787   78720 main.go:126] libmachine: Using SSH client type: native
I0409 11:30:23.497191   78720 main.go:126] libmachine: &{{{<nil> 0 [] [] []} docker [0x4418160] 0x4418120 <nil>  [] 0s} 127.0.0.1 65184 <nil> <nil>}
I0409 11:30:23.497221   78720 main.go:126] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0409 11:30:23.707391   78720 main.go:126] libmachine: SSH cmd err, output: <nil>: minikube

I0409 11:30:23.707564   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:23.987061   78720 main.go:126] libmachine: Using SSH client type: native
I0409 11:30:23.987334   78720 main.go:126] libmachine: &{{{<nil> 0 [] [] []} docker [0x4418160] 0x4418120 <nil>  [] 0s} 127.0.0.1 65184 <nil> <nil>}
I0409 11:30:23.987353   78720 main.go:126] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0409 11:30:24.137542   78720 main.go:126] libmachine: SSH cmd err, output: <nil>: 
I0409 11:30:24.137568   78720 ubuntu.go:175] set auth options {CertDir:/Users/izuyev/.minikube CaCertPath:/Users/izuyev/.minikube/certs/ca.pem CaPrivateKeyPath:/Users/izuyev/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/Users/izuyev/.minikube/machines/server.pem ServerKeyPath:/Users/izuyev/.minikube/machines/server-key.pem ClientKeyPath:/Users/izuyev/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/Users/izuyev/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/Users/izuyev/.minikube}
I0409 11:30:24.137595   78720 ubuntu.go:177] setting up certificates
I0409 11:30:24.137604   78720 provision.go:83] configureAuth start
I0409 11:30:24.137740   78720 cli_runner.go:115] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0409 11:30:24.321715   78720 provision.go:137] copyHostCerts
I0409 11:30:24.321771   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/certs/ca.pem -> /Users/izuyev/.minikube/ca.pem
I0409 11:30:24.321871   78720 exec_runner.go:145] found /Users/izuyev/.minikube/ca.pem, removing ...
I0409 11:30:24.321880   78720 exec_runner.go:190] rm: /Users/izuyev/.minikube/ca.pem
I0409 11:30:24.324422   78720 exec_runner.go:152] cp: /Users/izuyev/.minikube/certs/ca.pem --> /Users/izuyev/.minikube/ca.pem (1078 bytes)
I0409 11:30:24.324678   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/certs/cert.pem -> /Users/izuyev/.minikube/cert.pem
I0409 11:30:24.324743   78720 exec_runner.go:145] found /Users/izuyev/.minikube/cert.pem, removing ...
I0409 11:30:24.324750   78720 exec_runner.go:190] rm: /Users/izuyev/.minikube/cert.pem
I0409 11:30:24.325311   78720 exec_runner.go:152] cp: /Users/izuyev/.minikube/certs/cert.pem --> /Users/izuyev/.minikube/cert.pem (1119 bytes)
I0409 11:30:24.325922   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/certs/key.pem -> /Users/izuyev/.minikube/key.pem
I0409 11:30:24.325997   78720 exec_runner.go:145] found /Users/izuyev/.minikube/key.pem, removing ...
I0409 11:30:24.326007   78720 exec_runner.go:190] rm: /Users/izuyev/.minikube/key.pem
I0409 11:30:24.326363   78720 exec_runner.go:152] cp: /Users/izuyev/.minikube/certs/key.pem --> /Users/izuyev/.minikube/key.pem (1679 bytes)
I0409 11:30:24.326875   78720 provision.go:111] generating server cert: /Users/izuyev/.minikube/machines/server.pem ca-key=/Users/izuyev/.minikube/certs/ca.pem private-key=/Users/izuyev/.minikube/certs/ca-key.pem org=izuyev.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0409 11:30:24.594069   78720 provision.go:165] copyRemoteCerts
I0409 11:30:24.594241   78720 ssh_runner.go:149] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0409 11:30:24.594368   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:24.782871   78720 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:65184 SSHKeyPath:/Users/izuyev/.minikube/machines/minikube/id_rsa Username:docker}
I0409 11:30:24.878456   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/machines/server-key.pem -> /etc/docker/server-key.pem
I0409 11:30:24.878573   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1675 bytes)
I0409 11:30:24.900723   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/certs/ca.pem -> /etc/docker/ca.pem
I0409 11:30:24.900826   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1078 bytes)
I0409 11:30:24.919493   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/machines/server.pem -> /etc/docker/server.pem
I0409 11:30:24.919597   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/machines/server.pem --> /etc/docker/server.pem (1200 bytes)
I0409 11:30:24.941919   78720 provision.go:86] duration metric: configureAuth took 804.275952ms
I0409 11:30:24.941952   78720 ubuntu.go:193] setting minikube options for container-runtime
I0409 11:30:24.942572   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:25.124345   78720 main.go:126] libmachine: Using SSH client type: native
I0409 11:30:25.124581   78720 main.go:126] libmachine: &{{{<nil> 0 [] [] []} docker [0x4418160] 0x4418120 <nil>  [] 0s} 127.0.0.1 65184 <nil> <nil>}
I0409 11:30:25.124597   78720 main.go:126] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0409 11:30:25.256366   78720 main.go:126] libmachine: SSH cmd err, output: <nil>: overlay

I0409 11:30:25.256388   78720 ubuntu.go:71] root file system type: overlay
I0409 11:30:25.256619   78720 provision.go:296] Updating docker unit: /lib/systemd/system/docker.service ...
I0409 11:30:25.256820   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:25.425098   78720 main.go:126] libmachine: Using SSH client type: native
I0409 11:30:25.425405   78720 main.go:126] libmachine: &{{{<nil> 0 [] [] []} docker [0x4418160] 0x4418120 <nil>  [] 0s} 127.0.0.1 65184 <nil> <nil>}
I0409 11:30:25.425473   78720 main.go:126] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %s "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0409 11:30:25.578389   78720 main.go:126] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0409 11:30:25.578560   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:25.755084   78720 main.go:126] libmachine: Using SSH client type: native
I0409 11:30:25.755322   78720 main.go:126] libmachine: &{{{<nil> 0 [] [] []} docker [0x4418160] 0x4418120 <nil>  [] 0s} 127.0.0.1 65184 <nil> <nil>}
I0409 11:30:25.755349   78720 main.go:126] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0409 11:30:27.644033   78720 main.go:126] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2021-03-02 20:16:15.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2021-04-09 18:30:25.572901599 +0000
@@ -1,30 +1,32 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
+BindsTo=containerd.service
 After=network-online.target firewalld.service containerd.service
 Wants=network-online.target
-Requires=docker.socket containerd.service
+Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutSec=0
-RestartSec=2
-Restart=always
-
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
+Restart=on-failure
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
@@ -32,16 +34,16 @@
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0409 11:30:27.644058   78720 machine.go:91] provisioned docker machine in 4.483759574s
I0409 11:30:27.644066   78720 client.go:171] LocalClient.Create took 23.500548666s
I0409 11:30:27.644089   78720 start.go:168] duration metric: libmachine.API.Create for "minikube" took 23.501186209s
I0409 11:30:27.644104   78720 start.go:267] post-start starting for "minikube" (driver="docker")
I0409 11:30:27.644109   78720 start.go:277] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0409 11:30:27.644272   78720 ssh_runner.go:149] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0409 11:30:27.644366   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:27.813432   78720 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:65184 SSHKeyPath:/Users/izuyev/.minikube/machines/minikube/id_rsa Username:docker}
I0409 11:30:27.907531   78720 ssh_runner.go:149] Run: cat /etc/os-release
I0409 11:30:27.912382   78720 main.go:126] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0409 11:30:27.912404   78720 main.go:126] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0409 11:30:27.912417   78720 main.go:126] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0409 11:30:27.912447   78720 info.go:137] Remote host: Ubuntu 20.04.1 LTS
I0409 11:30:27.912470   78720 filesync.go:118] Scanning /Users/izuyev/.minikube/addons for local assets ...
I0409 11:30:27.912694   78720 filesync.go:118] Scanning /Users/izuyev/.minikube/files for local assets ...
I0409 11:30:27.912849   78720 start.go:270] post-start completed in 268.728866ms
I0409 11:30:27.914527   78720 cli_runner.go:115] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0409 11:30:28.101132   78720 profile.go:148] Saving config to /Users/izuyev/.minikube/profiles/minikube/config.json ...
I0409 11:30:28.102490   78720 ssh_runner.go:149] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0409 11:30:28.102600   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:28.273210   78720 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:65184 SSHKeyPath:/Users/izuyev/.minikube/machines/minikube/id_rsa Username:docker}
I0409 11:30:28.370426   78720 start.go:129] duration metric: createHost completed in 24.266388369s
I0409 11:30:28.370449   78720 start.go:80] releasing machines lock for "minikube", held for 24.266534943s
I0409 11:30:28.370903   78720 cli_runner.go:115] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0409 11:30:28.626747   78720 ssh_runner.go:149] Run: curl -sS -m 2 https://k8s.gcr.io/
I0409 11:30:28.626755   78720 ssh_runner.go:149] Run: systemctl --version
I0409 11:30:28.626951   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:28.629781   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:30:29.010378   78720 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:65184 SSHKeyPath:/Users/izuyev/.minikube/machines/minikube/id_rsa Username:docker}
I0409 11:30:29.010883   78720 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:65184 SSHKeyPath:/Users/izuyev/.minikube/machines/minikube/id_rsa Username:docker}
I0409 11:30:29.133731   78720 ssh_runner.go:149] Run: sudo systemctl is-active --quiet service containerd
I0409 11:30:29.335922   78720 ssh_runner.go:149] Run: sudo systemctl cat docker.service
I0409 11:30:29.351908   78720 cruntime.go:219] skipping containerd shutdown because we are bound to it
I0409 11:30:29.352183   78720 ssh_runner.go:149] Run: sudo systemctl is-active --quiet service crio
I0409 11:30:29.380828   78720 ssh_runner.go:149] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///var/run/dockershim.sock
image-endpoint: unix:///var/run/dockershim.sock
" | sudo tee /etc/crictl.yaml"
I0409 11:30:29.425216   78720 ssh_runner.go:149] Run: sudo systemctl cat docker.service
I0409 11:30:29.452481   78720 ssh_runner.go:149] Run: sudo systemctl daemon-reload
I0409 11:30:29.589678   78720 ssh_runner.go:149] Run: sudo systemctl start docker
I0409 11:30:29.613330   78720 ssh_runner.go:149] Run: docker version --format {{.Server.Version}}
I0409 11:30:29.744092   78720 out.go:184] * Preparing Kubernetes v1.20.2 on Docker 20.10.5 ...
* Preparing Kubernetes v1.20.2 on Docker 20.10.5 ...
I0409 11:30:29.744792   78720 cli_runner.go:115] Run: docker exec -t minikube dig +short host.docker.internal
I0409 11:30:30.047401   78720 network.go:68] got host ip for mount in container by digging dns: 192.168.65.2
I0409 11:30:30.048058   78720 ssh_runner.go:149] Run: grep 192.168.65.2	host.minikube.internal$ /etc/hosts
I0409 11:30:30.056453   78720 ssh_runner.go:149] Run: /bin/bash -c "{ grep -v '\thost.minikube.internal$' /etc/hosts; echo "192.168.65.2	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ /etc/hosts"
I0409 11:30:30.090348   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" minikube
I0409 11:30:30.338082   78720 preload.go:97] Checking if preload exists for k8s version v1.20.2 and runtime docker
I0409 11:30:30.338154   78720 preload.go:105] Found local preload: /Users/izuyev/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v10-v1.20.2-docker-overlay2-amd64.tar.lz4
I0409 11:30:30.338316   78720 ssh_runner.go:149] Run: docker images --format {{.Repository}}:{{.Tag}}
I0409 11:30:30.416480   78720 docker.go:455] Got preloaded images: -- stdout --
gcr.io/k8s-minikube/storage-provisioner:v5
k8s.gcr.io/kube-proxy:v1.20.2
k8s.gcr.io/kube-controller-manager:v1.20.2
k8s.gcr.io/kube-apiserver:v1.20.2
k8s.gcr.io/kube-scheduler:v1.20.2
kubernetesui/dashboard:v2.1.0
k8s.gcr.io/etcd:3.4.13-0
k8s.gcr.io/coredns:1.7.0
kubernetesui/metrics-scraper:v1.0.4
k8s.gcr.io/pause:3.2

-- /stdout --
I0409 11:30:30.416510   78720 docker.go:392] Images already preloaded, skipping extraction
I0409 11:30:30.417088   78720 ssh_runner.go:149] Run: docker images --format {{.Repository}}:{{.Tag}}
I0409 11:30:30.519008   78720 docker.go:455] Got preloaded images: -- stdout --
gcr.io/k8s-minikube/storage-provisioner:v5
k8s.gcr.io/kube-proxy:v1.20.2
k8s.gcr.io/kube-controller-manager:v1.20.2
k8s.gcr.io/kube-apiserver:v1.20.2
k8s.gcr.io/kube-scheduler:v1.20.2
kubernetesui/dashboard:v2.1.0
k8s.gcr.io/etcd:3.4.13-0
k8s.gcr.io/coredns:1.7.0
kubernetesui/metrics-scraper:v1.0.4
k8s.gcr.io/pause:3.2

-- /stdout --
I0409 11:30:30.519420   78720 cache_images.go:74] Images are preloaded, skipping loading
I0409 11:30:30.519916   78720 ssh_runner.go:149] Run: docker info --format {{.CgroupDriver}}
I0409 11:30:30.696194   78720 cni.go:81] Creating CNI manager for ""
I0409 11:30:30.696216   78720 cni.go:153] CNI unnecessary in this configuration, recommending no CNI
I0409 11:30:30.696434   78720 kubeadm.go:87] Using pod CIDR: 10.244.0.0/16
I0409 11:30:30.696478   78720 kubeadm.go:153] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.20.2 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/dockershim.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NoTaintMaster:true NodeIP:192.168.49.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[]}
I0409 11:30:30.697179   78720 kubeadm.go:157] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.20.2
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%"
  nodefs.inodesFree: "0%"
  imagefs.available: "0%"
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249

I0409 11:30:30.697880   78720 kubeadm.go:897] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.20.2/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime=docker --hostname-override=minikube --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.20.2 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:}
I0409 11:30:30.698012   78720 ssh_runner.go:149] Run: sudo ls /var/lib/minikube/binaries/v1.20.2
I0409 11:30:30.714737   78720 binaries.go:44] Found k8s binaries, skipping transfer
I0409 11:30:30.714922   78720 ssh_runner.go:149] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0409 11:30:30.735605   78720 ssh_runner.go:316] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (334 bytes)
I0409 11:30:30.768465   78720 ssh_runner.go:316] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0409 11:30:30.801254   78720 ssh_runner.go:316] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (1840 bytes)
I0409 11:30:30.830796   78720 ssh_runner.go:149] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0409 11:30:30.839731   78720 ssh_runner.go:149] Run: /bin/bash -c "{ grep -v '\tcontrol-plane.minikube.internal$' /etc/hosts; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ /etc/hosts"
I0409 11:30:30.862804   78720 certs.go:52] Setting up /Users/izuyev/.minikube/profiles/minikube for IP: 192.168.49.2
I0409 11:30:30.863367   78720 certs.go:171] skipping minikubeCA CA generation: /Users/izuyev/.minikube/ca.key
I0409 11:30:30.863517   78720 certs.go:171] skipping proxyClientCA CA generation: /Users/izuyev/.minikube/proxy-client-ca.key
I0409 11:30:30.863682   78720 certs.go:286] generating minikube-user signed cert: /Users/izuyev/.minikube/profiles/minikube/client.key
I0409 11:30:30.864250   78720 crypto.go:69] Generating cert /Users/izuyev/.minikube/profiles/minikube/client.crt with IP's: []
I0409 11:30:30.992692   78720 crypto.go:157] Writing cert to /Users/izuyev/.minikube/profiles/minikube/client.crt ...
I0409 11:30:30.992711   78720 lock.go:36] WriteFile acquiring /Users/izuyev/.minikube/profiles/minikube/client.crt: {Name:mk8c928c101dd1fb43d096f9827a278c36eb734b Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0409 11:30:30.993086   78720 crypto.go:165] Writing key to /Users/izuyev/.minikube/profiles/minikube/client.key ...
I0409 11:30:30.993097   78720 lock.go:36] WriteFile acquiring /Users/izuyev/.minikube/profiles/minikube/client.key: {Name:mk58326de02f897bcf73e6a1a6b2d20118383bef Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0409 11:30:30.993361   78720 certs.go:286] generating minikube signed cert: /Users/izuyev/.minikube/profiles/minikube/apiserver.key.dd3b5fb2
I0409 11:30:30.993369   78720 crypto.go:69] Generating cert /Users/izuyev/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 with IP's: [192.168.49.2 10.96.0.1 127.0.0.1 10.0.0.1]
I0409 11:30:31.166835   78720 crypto.go:157] Writing cert to /Users/izuyev/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 ...
I0409 11:30:31.166861   78720 lock.go:36] WriteFile acquiring /Users/izuyev/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2: {Name:mkd4547bd82a8488170c67ef64f52cbb55f6720d Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0409 11:30:31.167244   78720 crypto.go:165] Writing key to /Users/izuyev/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 ...
I0409 11:30:31.167256   78720 lock.go:36] WriteFile acquiring /Users/izuyev/.minikube/profiles/minikube/apiserver.key.dd3b5fb2: {Name:mkadcf0f520a6834666814ec7a639700e1ae55f6 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0409 11:30:31.167504   78720 certs.go:297] copying /Users/izuyev/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 -> /Users/izuyev/.minikube/profiles/minikube/apiserver.crt
I0409 11:30:31.168201   78720 certs.go:301] copying /Users/izuyev/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 -> /Users/izuyev/.minikube/profiles/minikube/apiserver.key
I0409 11:30:31.168505   78720 certs.go:286] generating aggregator signed cert: /Users/izuyev/.minikube/profiles/minikube/proxy-client.key
I0409 11:30:31.168514   78720 crypto.go:69] Generating cert /Users/izuyev/.minikube/profiles/minikube/proxy-client.crt with IP's: []
I0409 11:30:31.352077   78720 crypto.go:157] Writing cert to /Users/izuyev/.minikube/profiles/minikube/proxy-client.crt ...
I0409 11:30:31.352099   78720 lock.go:36] WriteFile acquiring /Users/izuyev/.minikube/profiles/minikube/proxy-client.crt: {Name:mk0496040729ac7e9b1c84aba5475dc44f512282 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0409 11:30:31.352418   78720 crypto.go:165] Writing key to /Users/izuyev/.minikube/profiles/minikube/proxy-client.key ...
I0409 11:30:31.352427   78720 lock.go:36] WriteFile acquiring /Users/izuyev/.minikube/profiles/minikube/proxy-client.key: {Name:mkd67466569b2ceacf263c0947e94ae04882cc10 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0409 11:30:31.352694   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/profiles/minikube/apiserver.crt -> /var/lib/minikube/certs/apiserver.crt
I0409 11:30:31.352747   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/profiles/minikube/apiserver.key -> /var/lib/minikube/certs/apiserver.key
I0409 11:30:31.352801   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/profiles/minikube/proxy-client.crt -> /var/lib/minikube/certs/proxy-client.crt
I0409 11:30:31.352854   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/profiles/minikube/proxy-client.key -> /var/lib/minikube/certs/proxy-client.key
I0409 11:30:31.352906   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/ca.crt -> /var/lib/minikube/certs/ca.crt
I0409 11:30:31.352955   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/ca.key -> /var/lib/minikube/certs/ca.key
I0409 11:30:31.352990   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/proxy-client-ca.crt -> /var/lib/minikube/certs/proxy-client-ca.crt
I0409 11:30:31.353024   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/proxy-client-ca.key -> /var/lib/minikube/certs/proxy-client-ca.key
I0409 11:30:31.353484   78720 certs.go:361] found cert: /Users/izuyev/.minikube/certs/Users/izuyev/.minikube/certs/ca-key.pem (1675 bytes)
I0409 11:30:31.353560   78720 certs.go:361] found cert: /Users/izuyev/.minikube/certs/Users/izuyev/.minikube/certs/ca.pem (1078 bytes)
I0409 11:30:31.353624   78720 certs.go:361] found cert: /Users/izuyev/.minikube/certs/Users/izuyev/.minikube/certs/cert.pem (1119 bytes)
I0409 11:30:31.353684   78720 certs.go:361] found cert: /Users/izuyev/.minikube/certs/Users/izuyev/.minikube/certs/key.pem (1679 bytes)
I0409 11:30:31.353738   78720 vm_assets.go:96] NewFileAsset: /Users/izuyev/.minikube/ca.crt -> /usr/share/ca-certificates/minikubeCA.pem
I0409 11:30:31.365033   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/profiles/minikube/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1399 bytes)
I0409 11:30:31.417706   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/profiles/minikube/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1679 bytes)
I0409 11:30:31.464628   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/profiles/minikube/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0409 11:30:31.518079   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/profiles/minikube/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1675 bytes)
I0409 11:30:31.560382   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0409 11:30:31.597699   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1675 bytes)
I0409 11:30:31.641470   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0409 11:30:31.689172   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I0409 11:30:31.730439   78720 ssh_runner.go:316] scp /Users/izuyev/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0409 11:30:31.776208   78720 ssh_runner.go:316] scp memory --> /var/lib/minikube/kubeconfig (752 bytes)
I0409 11:30:31.812774   78720 ssh_runner.go:149] Run: openssl version
I0409 11:30:31.825411   78720 ssh_runner.go:149] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0409 11:30:31.848889   78720 ssh_runner.go:149] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0409 11:30:31.861670   78720 certs.go:402] hashing: -rw-r--r-- 1 root root 1111 Apr  9 17:49 /usr/share/ca-certificates/minikubeCA.pem
I0409 11:30:31.861911   78720 ssh_runner.go:149] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0409 11:30:31.875786   78720 ssh_runner.go:149] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0409 11:30:31.895598   78720 kubeadm.go:386] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.19@sha256:4d7ca4cd5eda77ade1a15fb898d22ed0111d76106858d1cae25be9b110ec4b4a Memory:3890 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.99.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.20.2 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.20.2 ControlPlane:true Worker:true}] Addons:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: MultiNodeRequested:false}
I0409 11:30:31.895852   78720 ssh_runner.go:149] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0409 11:30:31.981060   78720 ssh_runner.go:149] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0409 11:30:32.015056   78720 ssh_runner.go:149] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0409 11:30:32.040470   78720 kubeadm.go:220] ignoring SystemVerification for kubeadm because of docker driver
I0409 11:30:32.040728   78720 ssh_runner.go:149] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0409 11:30:32.065504   78720 kubeadm.go:151] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0409 11:30:32.065961   78720 ssh_runner.go:240] Start: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.20.2:$PATH kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0409 11:31:00.655565   78720 out.go:184]   - Generating certificates and keys ...
  - Generating certificates and keys ...
I0409 11:31:00.702796   78720 out.go:184]   - Booting up control plane ...
  - Booting up control plane ...
I0409 11:31:00.723712   78720 out.go:184]   - Configuring RBAC rules ...
  - Configuring RBAC rules ...
I0409 11:31:00.726047   78720 cni.go:81] Creating CNI manager for ""
I0409 11:31:00.726059   78720 cni.go:153] CNI unnecessary in this configuration, recommending no CNI
I0409 11:31:00.726842   78720 ssh_runner.go:149] Run: sudo /var/lib/minikube/binaries/v1.20.2/kubectl label nodes minikube.k8s.io/version=v1.19.0-beta.0 minikube.k8s.io/commit=11a2d0aff09842d6d68c77d640b668994249d04d-dirty minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2021_04_09T11_31_00_0700 --all --overwrite --kubeconfig=/var/lib/minikube/kubeconfig
I0409 11:31:00.726842   78720 ssh_runner.go:149] Run: sudo /var/lib/minikube/binaries/v1.20.2/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig
I0409 11:31:00.726940   78720 ssh_runner.go:149] Run: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj"
I0409 11:31:00.753433   78720 ops.go:34] apiserver oom_adj: -16
I0409 11:31:00.856413   78720 kubeadm.go:973] duration metric: took 129.692931ms to wait for elevateKubeSystemPrivileges.
I0409 11:31:05.741505   78720 ssh_runner.go:189] Completed: sudo /var/lib/minikube/binaries/v1.20.2/kubectl label nodes minikube.k8s.io/version=v1.19.0-beta.0 minikube.k8s.io/commit=11a2d0aff09842d6d68c77d640b668994249d04d-dirty minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2021_04_09T11_31_00_0700 --all --overwrite --kubeconfig=/var/lib/minikube/kubeconfig: (5.014544251s)
I0409 11:31:05.741534   78720 kubeadm.go:388] StartCluster complete in 33.845329045s
I0409 11:31:05.741862   78720 settings.go:142] acquiring lock: {Name:mke097ca8ee63e7f4e74c26564ce9df021f665d9 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0409 11:31:05.742024   78720 settings.go:150] Updating kubeconfig:  /Users/izuyev/.kube/config
I0409 11:31:05.762975   78720 lock.go:36] WriteFile acquiring /Users/izuyev/.kube/config: {Name:mk929ac1323a6a908bcc1ad3b31fa284be759852 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0409 11:31:05.768349   78720 kapi.go:59] client config for minikube: &rest.Config{Host:"https://127.0.0.1:65190", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"/Users/izuyev/.minikube/profiles/minikube/client.crt", KeyFile:"/Users/izuyev/.minikube/profiles/minikube/client.key", CAFile:"/Users/izuyev/.minikube/ca.crt", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(0x57c5300), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), WarningHandler:rest.WarningHandler(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil), Proxy:(func(*http.Request) (*url.URL, error))(nil)}
I0409 11:31:05.772221   78720 cert_rotation.go:137] Starting client certificate rotation controller
I0409 11:31:06.442260   78720 kapi.go:244] deployment "coredns" in namespace "kube-system" and context "minikube" rescaled to 1
I0409 11:31:06.442762   78720 start.go:200] Will wait 6m0s for node &{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.20.2 ControlPlane:true Worker:true}
I0409 11:31:06.443202   78720 addons.go:328] enableAddons start: toEnable=map[], additional=[]
I0409 11:31:06.486975   78720 out.go:157] * Verifying Kubernetes components...
* Verifying Kubernetes components...
I0409 11:31:06.487551   78720 addons.go:55] Setting default-storageclass=true in profile "minikube"
I0409 11:31:06.487552   78720 addons.go:55] Setting storage-provisioner=true in profile "minikube"
I0409 11:31:06.487634   78720 addons_storage_classes.go:33] enableOrDisableStorageClasses default-storageclass=true on "minikube"
I0409 11:31:06.487765   78720 ssh_runner.go:149] Run: sudo systemctl is-active --quiet service kubelet
I0409 11:31:06.488077   78720 addons.go:131] Setting addon storage-provisioner=true in "minikube"
W0409 11:31:06.488124   78720 addons.go:140] addon storage-provisioner should already be in state true
I0409 11:31:06.488156   78720 host.go:66] Checking if "minikube" exists ...
I0409 11:31:06.490457   78720 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
I0409 11:31:06.496918   78720 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
I0409 11:31:06.507904   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" minikube
I0409 11:31:06.908382   78720 kapi.go:59] client config for minikube: &rest.Config{Host:"https://127.0.0.1:65190", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"/Users/izuyev/.minikube/profiles/minikube/client.crt", KeyFile:"/Users/izuyev/.minikube/profiles/minikube/client.key", CAFile:"/Users/izuyev/.minikube/ca.crt", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(0x57c5300), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), WarningHandler:rest.WarningHandler(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil), Proxy:(func(*http.Request) (*url.URL, error))(nil)}
I0409 11:31:06.930966   78720 out.go:157]   - Using image gcr.io/k8s-minikube/storage-provisioner:v5
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
I0409 11:31:06.911073   78720 kapi.go:59] client config for minikube: &rest.Config{Host:"https://127.0.0.1:65190", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"/Users/izuyev/.minikube/profiles/minikube/client.crt", KeyFile:"/Users/izuyev/.minikube/profiles/minikube/client.key", CAFile:"/Users/izuyev/.minikube/ca.crt", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(0x57c5300), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), WarningHandler:rest.WarningHandler(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil), Proxy:(func(*http.Request) (*url.URL, error))(nil)}
I0409 11:31:06.931077   78720 addons.go:261] installing /etc/kubernetes/addons/storage-provisioner.yaml
I0409 11:31:06.931086   78720 ssh_runner.go:316] scp memory --> /etc/kubernetes/addons/storage-provisioner.yaml (2676 bytes)
I0409 11:31:06.931255   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:31:06.943096   78720 api_server.go:48] waiting for apiserver process to appear ...
I0409 11:31:06.943237   78720 ssh_runner.go:149] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
I0409 11:31:06.949591   78720 addons.go:131] Setting addon default-storageclass=true in "minikube"
I0409 11:31:06.964174   78720 api_server.go:68] duration metric: took 521.049115ms to wait for apiserver process to appear ...
W0409 11:31:06.972574   78720 addons.go:140] addon default-storageclass should already be in state true
I0409 11:31:06.972588   78720 api_server.go:84] waiting for apiserver healthz status ...
I0409 11:31:06.972597   78720 host.go:66] Checking if "minikube" exists ...
I0409 11:31:06.972611   78720 api_server.go:221] Checking apiserver healthz at https://127.0.0.1:65190/healthz ...
I0409 11:31:06.973481   78720 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
I0409 11:31:06.994279   78720 api_server.go:241] https://127.0.0.1:65190/healthz returned 200:
ok
I0409 11:31:06.998564   78720 api_server.go:137] control plane version: v1.20.2
I0409 11:31:06.998650   78720 api_server.go:127] duration metric: took 26.04609ms to wait for apiserver health ...
I0409 11:31:06.998697   78720 system_pods.go:42] waiting for kube-system pods to appear ...
I0409 11:31:07.028018   78720 system_pods.go:58] 4 kube-system pods found
I0409 11:31:07.028061   78720 system_pods.go:60] "etcd-minikube" [3a740f1f-87e6-40f7-a1b1-6f0edba58c99] Pending
I0409 11:31:07.028070   78720 system_pods.go:60] "kube-apiserver-minikube" [40a0f806-b1bf-459a-8cbf-74febde7b4e7] Pending
I0409 11:31:07.028088   78720 system_pods.go:60] "kube-controller-manager-minikube" [a48e0f3d-51dd-401c-bd0e-a0f16efa1443] Running / Ready:ContainersNotReady (containers with unready status: [kube-controller-manager]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-controller-manager])
I0409 11:31:07.028105   78720 system_pods.go:60] "kube-scheduler-minikube" [dc3c52f8-e01b-4b59-b3dd-e9deaf9eb3de] Running / Ready:ContainersNotReady (containers with unready status: [kube-scheduler]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-scheduler])
I0409 11:31:07.028126   78720 system_pods.go:73] duration metric: took 29.416816ms to wait for pod list to return data ...
I0409 11:31:07.028137   78720 kubeadm.go:543] duration metric: took 585.012745ms to wait for : map[apiserver:true system_pods:true] ...
I0409 11:31:07.028158   78720 node_conditions.go:102] verifying NodePressure condition ...
I0409 11:31:07.036661   78720 node_conditions.go:122] node storage ephemeral capacity is 61255492Ki
I0409 11:31:07.036694   78720 node_conditions.go:123] node cpu capacity is 6
I0409 11:31:07.037730   78720 node_conditions.go:105] duration metric: took 9.220058ms to run NodePressure ...
I0409 11:31:07.037748   78720 start.go:205] waiting for startup goroutines ...
I0409 11:31:07.136988   78720 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:65184 SSHKeyPath:/Users/izuyev/.minikube/machines/minikube/id_rsa Username:docker}
I0409 11:31:07.179949   78720 addons.go:261] installing /etc/kubernetes/addons/storageclass.yaml
I0409 11:31:07.179969   78720 ssh_runner.go:316] scp memory --> /etc/kubernetes/addons/storageclass.yaml (271 bytes)
I0409 11:31:07.180111   78720 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0409 11:31:07.248905   78720 ssh_runner.go:149] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.20.2/kubectl apply -f /etc/kubernetes/addons/storage-provisioner.yaml
I0409 11:31:07.388506   78720 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:65184 SSHKeyPath:/Users/izuyev/.minikube/machines/minikube/id_rsa Username:docker}
I0409 11:31:07.495898   78720 ssh_runner.go:149] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.20.2/kubectl apply -f /etc/kubernetes/addons/storageclass.yaml
I0409 11:31:08.158385   78720 out.go:157] * Enabled addons: storage-provisioner, default-storageclass
* Enabled addons: storage-provisioner, default-storageclass
I0409 11:31:08.158454   78720 addons.go:330] enableAddons completed in 1.715227282s
I0409 11:31:08.384890   78720 start.go:460] kubectl: 1.20.2, cluster: 1.20.2 (minor skew: 0)
I0409 11:31:08.447784   78720 out.go:157] * Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
